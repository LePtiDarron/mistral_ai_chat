services:
  back:
    build:
      context: ./back
      dockerfile: Dockerfile
    image: nodejs-back
    container_name: mistral-back
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
      - ./back/.env
    volumes:
      - ./back:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - myapp-network
    restart: unless-stopped

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    image: reactjs-front
    container_name: mistral-front
    ports:
      - "3000:3000"
    depends_on:
      - back
    env_file:
      - .env
      - ./front/.env
    volumes:
      - ./front:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - myapp-network
    restart: unless-stopped

  db:
    image: postgres:13.9-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - myapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  myapp-network:
    driver: bridge

volumes:
  postgres-data: {}